234. Palindrome Linked List
Easy

8471

520

Add to List

Share
Given the head of a singly linked list, return true if it is a palindrome.



Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false


Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9


Follow up: Could you do it in O(n) time and O(1) space?

================================================================

ANSWER 

approach 1=create array 
store value of array; space o(n)
use array pallindrome method 


//approach 2

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* getMid(ListNode* head ) {
       ListNode* slow = head;
       ListNode* fast = head -> next;

        while(fast != NULL && fast-> next != NULL) {
            fast = fast -> next -> next;
            slow = slow -> next;
        }

        return slow;
    }
    ListNode* reverse(ListNode* head)
    {
        ListNode* curr=head;
        ListNode* next=NULL;
        ListNode* prev=NULL;
        while(curr!=NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
 bool isPalindrome(ListNode* head) {
     ListNode* middle=getMid(head);
     ListNode* temp=middle->next;
      middle->next=reverse(temp);
     ListNode* temp1=head;
     ListNode* temp2=middle->next;

         while( temp2 )
         {
              if(temp1->val != temp2->val)
              {
                return false;
              }
             temp1=temp1->next;
             temp2=temp2->next;
         }
       temp=middle->next;
       middle->next=reverse(temp);
        return true;
    }
};
